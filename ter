//
// Created by wojte on 20.03.2019.
//
#include "shapes-1.hpp"
#include "gmock/gmock.h"
#include "gtest/gtest.h"
#include <vector>
#include <memory>
TEST(SquareTest, area){
    Square s(2.0,3.0,4.0);
    EXPECT_EQ(s.area(),16.0);
    Shape& shape=s;
    EXPECT_EQ(shape.area(),16.0);
}
TEST(CircleTest,area){
    Circle c(1.3,4.5,3.0);
    Shape& shape=c;
    EXPECT_EQ(c.area(),9*PI);
    EXPECT_EQ(shape.area(),9*PI);
}
TEST(ShapesAuxTest, totalAreaOfShapeCollection){


    std::vector<std::unique_ptr<Shape>> v;
    std::vector<Shape*> v_pointer;
    v.push_back(std::make_unique<Square>(1,1,1.0));
    v.push_back(std::make_unique<Circle>(1,1,1.0));
    std::transform(v.begin(),v.end(),std::back_inserter(v_pointer),[](const std::unique_ptr<Shape>& up) { return up.get(); });
    EXPECT_EQ(calculate_total_area(v_pointer),1+PI);
}
